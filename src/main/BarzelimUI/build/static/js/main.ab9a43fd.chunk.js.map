{"version":3,"sources":["rack-table/rack_34u.png","utilities/deviceTypes.js","utilities/networks.js","rack-table/Umodal.js","rack-table/racktable.js","navbar/navbar.js","utilities/dataReciver.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UModal","openssh","link","props","uData","name","window","open","console","log","dataArray","Object","entries","this","forEach","key","value","push","_modal","Modal","show","animation","aria-labelledby","centered","Header","Title","Body","Footer","Button","variant","onClick","hide","React","Component","Racktable","state","showUModal","curU","showModal","u","setState","hideModal","dc","map","rack","Card","className","rack_id","Subtitle","network","Table","responsive","hover","borderless","bgcolor","width","renderU","data","reverse","index","openUdata","length","align","Container","Row","xs","renderRack","TopNav","fetch","then","res","json","catch","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","deviceTypes","require","networks","dataReciver","getDevices","a","devices","devicesRaw","type","rawDevice","subType","deviceID","_links","self","split","concat","error","getRacks","racks","createDc","temporaryRack","number","networkId","i","size","uNumber","content","device","deviceInArray","getDeviceById","DC","App","searchTerm","searchResults","handleChange","event","state_","target","filter","JSON","stringify","toLowerCase","includes","trim","Fragment","placeholder","onChange","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ab9a43fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rack_34u.db0184f8.png\";","module.exports = [\r\n    'servers',\r\n    'storages',\r\n    'networks'\r\n];","module.exports = [\r\n    'unknown',\r\n    'secret',\r\n    'topsecret'\r\n];","import Modal from \"react-bootstrap/Modal\";\r\nimport {Button, Dropdown} from \"react-bootstrap\"\r\nimport React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nclass UModal extends React.Component {\r\n  openssh = () =>{\r\n    let link = this.props.uData.name\r\n    window.open(\"ssh://\"+link , link);\r\n  };\r\n\r\n    render() {\r\n      console.log('in modal')\r\n\r\n      // Name: {this.props.uData.name}</Modal.Body>\r\n      let dataArray = []\r\n      Object.entries(this.props.uData).forEach(([key, value]) => {\r\n        if(key !== '_links') {\r\n          dataArray.push(<div>{key} : {value}</div>)\r\n        }\r\n      })\r\n\r\n      let _modal =\r\n          <Modal show={this.props.show}  animation={true} aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered>\r\n            <Modal.Header>\r\n              <Modal.Title>More Data</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            {dataArray}\r\n            </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.props.hide}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"info\" onClick={this.openssh}>\r\n              Open SSH Connection\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n  \r\n        console.log('_modal')\r\n        console.log(_modal)\r\n        console.log(this.props)\r\n        return (\r\n          _modal\r\n        );\r\n      }\r\n}\r\nexport default UModal;","import React from 'react';\r\nimport {Card,Table, Container, Row} from 'react-bootstrap';\r\nimport UModal from './Umodal';\r\nimport rack_34u from './rack_34u.png';\r\n\r\nclass Racktable extends React.Component {\r\n  state = { showUModal: false , curU:''};\r\n\r\n  showModal = (u) => {\r\n    this.setState({ showUModal: true , curU: u});\r\n  };\r\n\r\n  hideModal = () => {\r\n    this.setState({ showUModal: false });\r\n  };\r\n    renderRack(){\r\n      return this.props.dc.map(rack => {\r\n        return(\r\n          <Card className=\"ml-auto mr-auto\">\r\n            <Card.Body key = {rack.rack_id}>\r\n              <Card.Title>Rack #{rack.rack_id}</Card.Title>\r\n                <Card.Subtitle className=\"mb-2 text-muted\">{rack.network}</Card.Subtitle>\r\n                  <Table responsive hover borderless > \r\n                    <thead>\r\n                      <tr>\r\n                        <th bgcolor=\"#000000\" width=\"3%\"></th>\r\n                        <th bgcolor=\"#000000\"></th>\r\n                        <th bgcolor=\"#000000\" width=\"3%\"></th>\r\n                      </tr>\r\n                    </thead>\r\n                      {this.renderU(rack)}\r\n                  </Table>\r\n            </Card.Body>\r\n          </Card>\r\n\r\n        )\r\n      })\r\n        \r\n    }\r\n    renderU(rack){\r\n      let rackContent = rack.data.reverse()\r\n      return rackContent.map((u,index) => {\r\n        return(\r\n          <tbody>\r\n                <tr onClick={() => this.openUdata(u)}>\r\n                  <td bgcolor=\"#000000\" width=\"3%\" >{rack.data.length - index}</td>\r\n                  <td align='center'>{u.name}</td>\r\n                  <td bgcolor=\"#000000\" width=\"3%\">{rack.data.length - index}</td>\r\n                </tr>\r\n          </tbody>\r\n        )\r\n      })\r\n    }\r\n    openUdata(u){\r\n      if(this.state.showUModal){\r\n        this.hideModal();\r\n      }\r\n      else{\r\n        this.showModal(u);\r\n      }\r\n    }\r\n    render() {\r\n        return (\r\n          <Container align=\"center\">\r\n            <Row xs='4'>\r\n            {this.renderRack()}\r\n          </Row>\r\n          <UModal show={this.state.showUModal} uData = {this.state.curU} hide = {this.hideModal} ></UModal>\r\n        </Container>\r\n              \r\n\r\n        );\r\n      }\r\n}\r\n\r\nexport default Racktable;","import React from 'react';\r\nimport {Navbar, Nav,Form, FormControl, Button, NavDropdown} from 'react-bootstrap'\r\nclass TopNav extends React.Component {\r\n    componentDidMount() {\r\n        fetch('/api/devices')\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n          //this.setState({ contacts: data })\r\n          console.log(data)\r\n        })\r\n        .catch(console.log)\r\n      }\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#home\">Barzelim</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"mr-auto\">\r\n                                <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                            </Nav>\r\n\r\n                        </Navbar.Collapse>\r\n                </Navbar>\r\n        );\r\n      }\r\n}\r\n\r\nexport default TopNav;","const deviceTypes = require('./deviceTypes')\r\nconst networks = require('./networks')\r\n\r\nconst dataReciver = {\r\n    getDevices : async () => {\r\n        let devicesRaw\r\n        let devices = []\r\n\r\n        try {\r\n        devicesRaw = await fetch('/api/devices')\r\n        devicesRaw = await devicesRaw.json()\r\n        console.log(deviceTypes)\r\n        deviceTypes.forEach(type => {\r\n            devicesRaw['_embedded'][type].forEach(rawDevice => {\r\n                 rawDevice.subType = type;\r\n                 let deviceID = rawDevice._links.self.href.split('//')[rawDevice._links.self.href.split('//').length -1]\r\n                 rawDevice.deviceID = deviceID.split('/')[deviceID.split('/').length -1]\r\n            });\r\n            devices = devices.concat(devicesRaw['_embedded'][type])\r\n        })\r\n    } catch {\r\n        console.error();\r\n    }\r\n\r\n    console.log('in getDevices!')\r\n    console.log(devicesRaw)\r\n    console.log(devices)\r\n    return (devices)\r\n    },\r\n\r\n    getRacks : async () => {\r\n\r\n        let racks\r\n        try {\r\n            racks = await (await fetch('/api/racks')).json()\r\n            racks = racks['_embedded']['racks']\r\n            console.log('racks')\r\n            console.log(racks)\r\n        } catch {\r\n            console.error()\r\n        }\r\n\r\n        return (racks)\r\n    },\r\n\r\n    createDc : async (racks = [], devices = []) => {\r\n        let dc = []\r\n        let temporaryRack = {}\r\n        racks.forEach(rack => {\r\n            temporaryRack.rack_id = rack.number\r\n            temporaryRack.network = networks[rack.networkId];\r\n            \r\n            temporaryRack.data = []\r\n            for (let i = 0; i < rack.size; i++) {\r\n                temporaryRack.data.push({uNumber:i})\r\n            }\r\n            console.log(`data size ${temporaryRack.data.length}`)\r\n            \r\n            rack.content.forEach(deviceID => {\r\n                let device = {}\r\n                devices.forEach(deviceInArray => {\r\n                    if (deviceInArray.deviceID === deviceID) { device = deviceInArray}\r\n                });\r\n                temporaryRack.data[device.uNumber - 1] = device // -1 so that the device in 1 will be in the index 0.\r\n                console.log('device ID!' + device)\r\n            });\r\n            console.log('temporaryRack')\r\n            console.log(temporaryRack)\r\n            console.log(rack.number)\r\n\r\n            dc.push(temporaryRack)\r\n        });\r\n\r\n        return (dc)\r\n    },\r\n    \r\n    getDeviceById : async (id = \"\", devices = []) => {\r\n        devices.forEach(device => {\r\n            if (device.deviceID === id) { return (device)}\r\n        });\r\n    }\r\n}\r\n\r\nexport default dataReciver;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Racktable from './rack-table/racktable';\r\nimport TopNav from './navbar/navbar';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport dataReciver from './utilities/dataReciver' //use import instead of require because auto build is stupid\r\n\r\n//const DC = require('../src/rack-table/dc')\r\nlet DC = [];\r\n\r\n\r\n//https://github.com/arnab-datta/counter-app/blob/master/src/App.js\r\nclass App extends Component {\r\n  state = {\r\n    searchTerm : \"\",\r\n    searchResults : []\r\n  };\r\n\r\n  handleChange = event => {\r\n    let state_ = {...this.state}\r\n    console.log(event.target.value)\r\n    state_.searchTerm = event.target.value\r\n    state_.searchResults = DC.filter(rack =>\r\n      JSON.stringify(rack).toLowerCase().includes(state_.searchTerm.toLowerCase().trim()));\r\n    this.setState(state_)\r\n  };\r\n\r\n  async componentWillMount() {\r\n    // TODO - set the real data in the state\r\n    let state_ = {...this.state}\r\n    state_.searchResults = DC;\r\n    this.setState(state_)\r\n\r\n    let devices = await dataReciver.getDevices()\r\n    let racks = await dataReciver.getRacks()\r\n    DC = await dataReciver.createDc(racks, devices)\r\n\r\n    state_ = {...this.state}\r\n    state_.searchResults = DC;\r\n    this.setState(state_)\r\n    console.log(devices)\r\n    console.log(racks)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <TopNav></TopNav>\r\n        <input type=\"text\" placeholder=\"Type any vaule to search in the DC...\" value={this.state.searchTerm} onChange={this.handleChange}/>\r\n        <Racktable dc={this.state.searchResults}></Racktable>\r\n      </React.Fragment>\r\n    )}\r\n  }\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}